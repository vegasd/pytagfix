#!/usr/bin/python

import sys
import os

import taglib

from prettytitle import pretty_string


def process_dir(srcdir):
    mf = []
    for dirpath, dirs, files in os.walk(srcdir, topdown=False):
        for name in sorted(files):
            try:
                ff = taglib.File(os.path.join(os.path.abspath(dirpath), name))
            except:
                print("SKIPPING not music file: {0}".format(name))
            else:
                mf.append(ff)
    process_music_files(mf)


def input_yes(s):
    ans = input("{} [y/N]".format(s))
    if ans and (ans in "yY"):
        return True
    return False


def get_album_artist(artist_list):
    print("More then one artist found")
    if len(artist_list) < 5:
        if input_yes("Is it Split"):
            return " & ".join(artist_list)
    else:
        if input_yes("Is it VA"):
            return "VA"
    return None


def get_common_data(files):
    newdata = {"ARTIST": [], "ALBUM": [], "DATE": [], "GENRE": []}
    for tagname in sorted(newdata.keys()):
        for f in files:
            if tagname in f.tags:
                d = f.tags[tagname]
                d = pretty_string(d[0])
                if d and d not in newdata[tagname]:
                    newdata[tagname].append(d)
        if not newdata[tagname]:
            newdata[tagname] = [
                input("No {0} found. Enter {0}: ".format(tagname))]
    if len(newdata["ARTIST"]) > 1:
        albumartist = get_album_artist(newdata["ARTIST"])
        if albumartist is None:
            print("\nArtists are: \n    " + "\n    ".join(newdata["ARTIST"]))
            newdata["ARTIST"] = [input("Enter Artist: ")]
        else:
            newdata["ALBUMARTIST"] = [albumartist]
    for tagname in ("ALBUM", "DATE"):
        if len(newdata[tagname]) > 1:
            print("More then one {0} found:".format(tagname))
            print("    " + "\n    ".join(newdata[tagname]))
            newdata[tagname] = [input("Enter {0}: ".format(tagname))]
    if len(newdata["DATE"][0]) != 4:
        print("Date doesn't look like a year number: " + newdata["DATE"][0])
        newdate = input(
            "Enter date or press enter to use {0}:".format(newdata["DATE"][0]))
        if newdate:
            newdata["DATE"] = [newdate]
    return newdata


def process_music_files(files):
    newdata = get_common_data(files)
    print("For ALL songs tags will be set to:")
    for k in sorted(newdata):
        if len(newdata[k]) == 1:
            print("{0:>12}: {1}".format(k, newdata[k][0]))

    newfiles = []
    for f in files:
        f = edit_tags_common(f, newdata)
        f = edit_tags1(f)
        if f.path.lower().endswith('mp3'):
            if "TOTALTRACKS" in f.tags:
                del f.tags["TOTALTRACKS"]
            if '/' not in f.tags['TRACKNUMBER'][0]:
                f.tags['TRACKNUMBER'][0] = "{0}/{1:02d}".format(
                    f.tags['TRACKNUMBER'][0],
                    len(files))
        else:
            f.tags["TOTALTRACKS"] = ["{0:02d}".format(len(files))]

        newfiles.append(f)

    for f in newfiles:
        f.save()

    # Print 'Artist - YYYY - Album'
    print(" - ".join((newdata.get("ALBUMARTIST", newdata["ARTIST"])[0],
                      newdata["DATE"][0],
                      newdata["ALBUM"][0])))


def edit_tags_common(f, common):
    f.tags["ALBUM"] = common["ALBUM"]
    f.tags["DATE"] = common["DATE"]

    if "ALBUMARTIST" in common:
        f.tags["ALBUMARTIST"] = common["ALBUMARTIST"]
        f.tags["ARTIST"] = [pretty_string(f.tags["ARTIST"][0])]
    else:
        if "ALBUMARTIST" in f.tags:
            del f.tags["ALBUMARTIST"]
        f.tags["ARTIST"] = common["ARTIST"]

    if "GENRE" in f.tags:
        f.tags["GENRE"] = [pretty_string(f.tags["GENRE"][0])]
    else:
        f.tags["GENRE"] = common["GENRE"]
    return f


def edit_tags1(f):
    if 'TRACKNUMBER' in f.tags:
        f.tags["TRACKNUMBER"] = [f.tags["TRACKNUMBER"][0].zfill(2)]
    else:
        filename = os.path.basename(f.path)
        if filename[:2].isdigit():
            f.tags["TRACKNUMBER"] = [filename[:2]]
        else:
            f.tags['TRACKNUMBER'] = [input(
                "Enter TRACKNUMBER for '{0}': ".format(filename)
            )]

    # Delete dummy comments
    if "COMMENT" in f.tags and f.tags["COMMENT"][0].lower().startswith("track"):
        if f.tags["COMMENT"][0].split(num=1)[1].isalnum():
            del f.tags["COMMENT"]

    if "TITLE" in f.tags:
        f.tags["TITLE"] = [pretty_string(f.tags["TITLE"][0])]
    else:
        f.tags["TITLE"] = ["[untitled]"]

    # Strip leading tracknumber from track title
    if f.tags["TITLE"][0].startswith(f.tags['TRACKNUMBER'][0]):
        if f.tags["TITLE"][0][2:4] in (". ", " -", "- "):
            f.tags["TITLE"][0] = f.tags["TITLE"][0][4:].lstrip()

    todel = ("band", "performer", "album artist", "tracktotal")
    for prop in todel + tuple(x.upper for x in todel):
        if prop in f.tags:
            print("deleting '{0}' from '{1}'".format(prop,
                                                     os.path.basename(f.path)))
            del f.tags[prop]
    return f


def main():
    if len(sys.argv) < 2:
        print("You should specify an album directory")
        return 1

    for d in sys.argv[1:]:
        print("\nProcessing '{0}'".format(d))
        process_dir(d)

if __name__ == "__main__":
    main()
