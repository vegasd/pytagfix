#!/usr/bin/python

import sys
import os

import taglib

DONTCAP = ("a", "an", "the",
           "and", "but", "or", "nor", "for", "yet", "so",
           "as", "at", "by", "for", "in", "of", "on", "to", "from",
           "v", "vs", "versus", "etc",
           "ov", "ye")

def pretty_word(s, newsent=False):
    if not newsent and (s.lower() in DONTCAP):
        return s.lower()
    if s[-1] in ".!?;:)]":
        return pretty_word(s[:-1], newsent) + s[-1]
    if s[0] in "(['\"":
        return s[0] + pretty_word(s[1:], True)
    if s.startswith("..."):
        return "..." + pretty_word(s[3:], True)

    # Don't touch abbreviatures and roman numbers
    if (s.isupper() and (s.strip("().-IVXLCDM") == "")) or (s.count(".") > 0):
        return s

    # Don't touch words with only consonant letters,
    # it's most likely not a regular word.
    if (len(s) > 1) and (s.upper().strip("BCDFGHJKLMNPQRSTVWXZ") == ""):
        return s

    # Capitalize every part of words with '-' or '/'
    for symbol in "-/":
        if symbol in s:
            return symbol.join(x.capitalize() for x in s.split(symbol))

    return s.capitalize()

def pretty_string(s):
    newwords = []
    newsent = True
    for w in s.split():
        word = pretty_word(w, newsent)
        if (word[-1] in ".!?;:") or (word == "-"):
            newsent = True
        else:
            newsent = False
        newwords.append(word)

    # also capitalize the very last word
    newwords[-1] = pretty_word(newwords[-1], True)

    if newwords[-1] == "Cover)":
        newwords[-1] = "cover)"
    return " ".join(newwords)

def process_dir(srcdir):
    mf = []
    for dirpath, dirs, files in os.walk(srcdir, topdown=False):
        for name in files:
            f = os.path.join(os.path.abspath(dirpath), name)
            try:
                ff = taglib.File(os.path.join(os.path.abspath(dirpath), name))
            except:
                print("SKIPPING not music file: {0}".format(name))
            else:
                mf.append(ff)
    process_mfs(mf)

def get_common_data(files):
    newdata = {"ARTIST": [], "ALBUM": [], "DATE": [], "GENRE": []}
    for f in files:
        for tagname in newdata.keys():
            d = ""
            if tagname in f.tags:
                d = pretty_string(f.tags[tagname][0])
                if d not in newdata[tagname]:
                    newdata[tagname].append(d)
    for tagname in newdata.keys():
        if not newdata[tagname]:
            print("WARNING! No " + tagname)
            newdata[tagname] = [input("Enter {0}: ".format(tagname))]
    if len(newdata["ARTIST"]) > 1:
        print("More then one artist found")
        if len(newdata["ARTIST"]) < 5:
            ans = input("Is it Split [y/N]")
            if ans and (ans in "yY"):
                newdata["ALBUMARTIST"] = [" & ".join(newdata["ARTIST"])]
        else:
            ans = input("Is it VA [y/N]")
            if ans and (ans in "yY"):
                newdata["ALBUMARTIST"] = ["VA"]
        if "ALBUMARTIST" not in newdata:
            print("\nArtists are: \n    " + "\n    ".join(newdata["ARTIST"]))
            newdata["ARTIST"] = [input("Enter Artist: ")]
    for tagname in ("ALBUM", "DATE"):
        if len(newdata[tagname]) > 1:
            print("More then one {0} found:".format(tagname))
            print("    " + "\n    ".join(newdata[tagname]))
            newdata[tagname] = [input("Enter {0}: ".format(tagname))]
    if len(newdata["DATE"][0]) != 4:
        print("Date doesn't look like a year number: " + newdata["DATE"][0])
        newdate = input("Enter date or press enter to use {0}:".format(newdata["DATE"][0]))
        if newdate:
            newdata["DATE"] = [newdate]
    return newdata

def process_mfs(files):
    newdata = get_common_data(files)
    print("For ALL songs tags will be set to:")
    for k in sorted(newdata):
        if len(newdata[k]) == 1:
            print("{0:>12}: {1}".format(k, newdata[k][0]))
    
    newfiles = []
    for f in files:
        f.tags["ALBUM"] = newdata["ALBUM"]
        f.tags["DATE"] = newdata["DATE"]

        if "ALBUMARTIST" in newdata:
            f.tags["ALBUMARTIST"] = newdata["ALBUMARTIST"]
            f.tags["ARTIST"] = [pretty_string(f.tags["ARTIST"][0])]
        else:
            if "ALBUMARTIST" in f.tags:
                del f.tags["ALBUMARTIST"]
            f.tags["ARTIST"] = newdata["ARTIST"]

        if "TITLE" in f.tags:
            f.tags["TITLE"] = [pretty_string(f.tags["TITLE"][0])]
        else:
            f.tags["TITLE"] = ["[untitled]"]

        if "GENRE" in f.tags:
            f.tags["GENRE"] = [pretty_string(f.tags["GENRE"][0])]
        else:
            f.tags["GENRE"] = newdata["GENRE"]
        
        # Make track number 2 digits
        if 'TRACKNUMBER' in f.tags:
            if len(f.tags['TRACKNUMBER'][0]) == 1:
                f.tags['TRACKNUMBER'] = ["0"+f.tags['TRACKNUMBER'][0]]
        else:
            f.tags['TRACKNUMBER'] = [input("Enter TRACKNUMBER for '{0}': ".format(os.path.basename(f.path)))]

        # Strip leading tracknumber from track name
        if f.tags["TITLE"][0].startswith(f.tags['TRACKNUMBER'][0]):
            if f.tags["TITLE"][0][2:4] in (". ", " -", "- "):
                f.tags["TITLE"][0] = f.tags["TITLE"][0][4:].lstrip()

        if f.path.lower().endswith('mp3'):
            if "TOTALTRACKS" in f.tags:
                del f.tags["TOTALTRACKS"]
            if '/' not in f.tags['TRACKNUMBER'][0]:
                f.tags['TRACKNUMBER'][0] = f.tags['TRACKNUMBER'][0] + "/{0:02d}".format(len(files))
        else:
            f.tags["TOTALTRACKS"] = ["{0:02d}".format(len(files))]

        todel = ("BAND", "PERFORMER", "band", "performer",
                 "ALBUM ARTIST", "album artist",
                 "TRACKTOTAL", "tracktotal")
        for prop in todel:
            if prop in f.tags:
                print("deleting '{0}' from '{1}'".format(
                                            prop, os.path.basename(f.path)))
                del f.tags[prop]

        newfiles.append(f)
    
    for f in newfiles:
        f.save()
    
    # Print 'Artist - YYYY - Album'
    if "ALBUMARTIST" in newdata:
        artist = newdata["ALBUMARTIST"][0]
    else:
        artist = newdata["ARTIST"][0]
    print("{0} - {1} - {2}".format(artist, newdata["DATE"][0], newdata["ALBUM"][0]))


def main():
    if len(sys.argv) < 2:
        print("You should specify an album directory")
        return

    for d in sys.argv[1:]:
        print("\nProcessing '{0}'".format(d))
        process_dir(d)

if  __name__ ==  "__main__":
    main()
